<snippet>
	<content><![CDATA[

int ar[N];

struct item
{
    $1
    int pref, seg, min, cnt;
};

struct ST
{

    item values[4 * N];
    static const int inf = 1e9;
    ST() {
        memset(values, 0, sizeof values);
        memset(ar, 0, sizeof ar);
    }
    item Neutral_ele = {0, 0, 0, 0};

    item marge(item a, item b)
    {

        return {
            max(a.seg, max(b.seg, a.suf + b.prf)),
            max(a.prf, a.sum + b.prf),
            max(b.suf, b.sum + a.suf),
            a.sum + b.sum};
    }

    item single(int v)
    {
        if (v > 0)
            return {v, v, v, v};
        else
            return {0ll, 0ll, 0ll, v};
    }

    void build(int n, int b, int e)
    {
        if (b == e)
        {
            values[n] = single(ar[b]);
            return;
        }
        int mid = (b + e) >> 1, l = n << 1, r = l | 1;
        build(l, b, mid);
        build(r, mid + 1, e);
        values[n] = marge(values[l], values[r]);
    }
    void upd(int n, int b, int e, int i, int x)
    {
        if (b > i || e < i)
            return;
        if (b == e && b == i)
        {
            values[n] = single(x);
            return;
        }
        int mid = (b + e) >> 1, l = n << 1, r = l | 1;
        upd(l, b, mid, i, x);
        upd(r, mid + 1, e, i, x);
        values[n] = marge(values[l], values[r]);
    }
    item query(int n, int b, int e, int i, int j)
    {
        if (b > j || e < i)
            return Neutral_ele;
        if (b >= i && e <= j)
            return values[n];
        int mid = (b + e) >> 1, l = n << 1, r = l | 1;
        item L = query(l, b, mid, i, j);
        item R = query(r, mid + 1, e, i, j);
        return marge(L, R);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
